Live.SimpleImgShow = function () {
    this.config = {showCnt: 6, items: null, playRight: null, playLeft: null, curPage: 0, disCss: "over", leftDisCss: null, rightDisCss: null, showImgOnInit: true, defaultIndex: 0, triggerEvent: "click", isPolish: true, isLoopPlay: false, onchange: null, changeDisplay: true}
}
Live.SimpleImgShow.prototype = {init: function (_config) {
    for (var prop in _config) {
        this.config[prop] = _config[prop];
    }
    var self = this;
    this.config.playRight.attr("hideFocus", "true");
    this.config.playRight.bind(this.config.triggerEvent, function (evt) {
        QZFL.event.preventDefault(evt);
        self.moveR();
    });
    this.config.playLeft.attr("hideFocus", "true");
    this.config.playLeft.bind(this.config.triggerEvent, function (evt) {
        QZFL.event.preventDefault(evt);
        self.moveL();
    });
    if (this.config.defaultIndex >= 0) {
        this.show(this.config.defaultIndex);
    }
}, play: function (offset) {
    var istart = 0, iend = 0;
    if (offset < 0 && this.config.curPage == 0) {
        if (!!this.config.isLoopPlay) {
            istart = (Math.ceil(this.config.items.size() / this.config.showCnt) - 1) * this.config.showCnt;
            iend = istart + this.config.showCnt - 1;
        }
        else {
            return;
        }
    }
    if (offset > 0 && this.config.curPage == Math.ceil(this.config.items.size() / this.config.showCnt) - 1) {
        if (!!this.config.isLoopPlay) {
            istart = offset + this.config.curPage * this.config.showCnt;
            if (istart >= this.config.items.size()) {
                istart -= this.config.items.size();
            }
            iend = istart + this.config.showCnt;
        }
        else {
            return;
        }
    }
    if ((offset < 0 && this.config.curPage == 0) || (offset > 0 && this.config.curPage == Math.ceil(this.config.items.size() / this.config.showCnt) - 1)) {
        null;
    }
    else {
        istart = this.config.curPage * this.config.showCnt + offset;
        iend = (this.config.curPage + 1) * this.config.showCnt + offset - 1;
    }
    istart = istart < 0 ? 0 : istart;
    iend = iend > this.config.items.size() - 1 ? this.config.items.size() - 1 : iend;
    if (!!this.config.isPolish) {
        if (iend - istart + 1 < this.config.showCnt) {
            istart = istart - (this.config.showCnt - (iend - istart)) + 1;
        }
    }
    this.showBySE(istart, iend, offset);
}, showBySE: function (istart, iend, offset) {
    if (this.config.changeDisplay) {
        var fnName = "get";
        if (typeof this.config.items.get(i).hide != "function") {
            fnName = "eq";
        }
        for (var i = istart; i <= iend; i++) {
            var $item = this.config.items[fnName](i);
            if (!$item)
                return;
            if (!!this.config.showImgOnInit) {
                var $img = $item.find("img");
                if (!$img.attr("src")) {
                    $img.attr("src", $img.attr("_src"));
                }
            }
            $item.show();
        }
        for (var i = 0; i < istart; i++) {
            this.config.items[fnName](i).hide();
        }
        for (var i = iend + 1, len = this.config.items.size(); i < len; i++) {
            this.config.items[fnName](i).hide();
        }
    }
    if (offset > 0) {
        if (this.config.curPage == Math.ceil(this.config.items.size() / this.config.showCnt) - 1) {
            this.config.curPage = 0;
        }
        else {
            this.config.curPage += Math.floor(offset / this.config.showCnt);
        }
    }
    else if (offset < 0) {
        if (this.config.curPage == 0) {
            this.config.curPage = Math.ceil(this.config.items.size() / this.config.showCnt) - 1
        }
        else {
            this.config.curPage -= Math.floor(Math.abs(offset) / this.config.showCnt);
        }
    }
    if (!this.config.isLoopPlay) {
        this.setBtn();
    }
    if (typeof this.config.onchange == "function") {
        this.config.onchange(istart, iend, this.config.curPage);
    }
}, show: function (tabidx) {
    var istart = 0, iend = 0, itemSize = this.config.items.size(), totalPage = Math.ceil(itemSize / this.config.showCnt), offset;
    if (tabidx > 0 && tabidx == (totalPage - 1) && !!this.config.isPolish) {
        iend = itemSize - 1;
        istart = itemSize - this.config.showCnt;
    }
    else {
        istart = tabidx * this.config.showCnt;
        iend = istart + this.config.showCnt - 1;
    }
    offset = istart - this.config.curPage * this.config.showCnt;
    this.showBySE(istart, iend, offset);
}, moveR: function () {
    this.play(this.config.showCnt);
}, moveL: function () {
    this.play(-1 * this.config.showCnt);
}, setBtn: function () {
    if (this.config.curPage <= 0) {
        if (!!this.config.leftDisCss) {
            this.config.playLeft.addClass(this.config.leftDisCss);
        }
        else {
            this.config.playLeft.addClass(this.config.disCss);
        }
    }
    else {
        if (!!this.config.leftDisCss) {
            this.config.playLeft.removeClass(this.config.leftDisCss);
        }
        else {
            this.config.playLeft.removeClass(this.config.disCss);
        }
    }
    if (this.config.curPage == Math.ceil(this.config.items.size() / this.config.showCnt) - 1) {
        if (!!this.config.rightDisCss) {
            this.config.playRight.addClass(this.config.rightDisCss);
        }
        else {
            this.config.playRight.addClass(this.config.disCss);
        }
    }
    else {
        if (!!this.config.rightDisCss) {
            this.config.playRight.removeClass(this.config.rightDisCss);
        }
        else {
            this.config.playRight.removeClass(this.config.disCss);
        }
    }
}};
Live.txv.FocusSlider = function () {
    this.colorCache = {};
    this.conf = {autoplay: true, autoplayDur: 3000, modId: "mod_txv_focus", modShowPicId: "mod_txv_focus_showpic", modPrevShowPicId: "mod_txv_focus_prevpic", modTitle: "mod_txv_focus_title", curClass: "cur", modNav: "mod_txv_focus_nav", activeClass: "active", onChange: QZFL.emptyFn, wheretoaddActive: "", delay: 200, fadeUpInterval: 40, fadeCoverId: "fadecover", preLoadImgNum: 2};
    this.timer = null;
    this.curIndex = -1;
    this.hadLoad = {0: true};
    this._opacity = 0.9;
    this.fadeUpTimer = null;
    this.canPlay = true;
}
Live.txv.FocusSlider.prototype = {rgbReg: /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/, colorHex: function (color) {
    var aColor, strHex, aNum, i, numHex;
    if (/^(rgb|RGB)/.test(color)) {
        aColor = color.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
        strHex = "#";
        for (var i = 0; i < aColor.length; i++) {
            var hex = Number(aColor[i]).toString(16);
            if (hex === "0") {
                hex += hex;
            }
            strHex += hex;
        }
        if (strHex.length !== 7) {
            strHex = color;
        }
        return strHex;
    }
    else if (this.rgbReg.test(color)) {
        aNum = color.replace(/#/, "").split("");
        if (aNum.length === 6) {
            return color;
        }
        else if (aNum.length === 3) {
            numHex = "#";
            for (i = 0; i < aNum.length; i += 1) {
                numHex += (aNum[i] + aNum[i]);
            }
            return numHex;
        }
    }
    else {
        return color;
    }
}, colorRgb: function (color, alpha) {
    var sColor = color.toLowerCase(), sColorChange = [], sColorNew;
    if (sColor && this.rgbReg.test(sColor)) {
        if (sColor.length === 4) {
            sColorNew = "#";
            for (var i = 1; i < 4; i += 1) {
                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
            }
            sColor = sColorNew;
        }
        for (var i = 1; i < 7; i += 2) {
            sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
        }
        if (alpha !== undefined) {
            return"rgba(" + sColorChange.join(",") + "," + alpha + ")";
        }
        else {
            return"rgb(" + sColorChange.join(",") + ")";
        }
    }
    else {
        return sColor;
    }
}, msColor: function (color, alpha) {
    var num = Math.floor((Math.floor(alpha * 100) / 100) * 255).toString(16);
    if (num.length < 2) {
        num = "0" + num;
    }
    color = color.replace(/#/, '#' + num);
    return color;
}, rgbaTest: (function () {
    var isSupport = null;
    return function () {
        if (typeof isSupport == "boolean") {
            return isSupport;
        }
        else {
            var ele = document.createElement('div'), style = ele.style;
            style.cssText = 'background-color:rgba(150,255,150,.5)';
            isSupport = ('' + style.backgroundColor).indexOf('rgba') !== -1;
            return isSupport;
        }
    };
}), init: function (_conf) {
    QZFL.object.extend(this.conf, _conf);
    this.bindEvent();
    if (!this.isNeedCover()) {
        QZFL.dom.removeElement(this.conf.fadeCoverId);
    }
    this.starAutoPlay(0);
}, stop: function () {
    clearInterval(this.timer);
}, starAutoPlay: function (idx) {
    if (!this.conf.autoplay) {
        return;
    }
    clearInterval(this.timer);
    var $me = this;
    $me.play(idx);
    this.timer = setInterval(function () {
        var hidden = document.webkitHidden || document.mozHidden || document.mozHidden || document.msHidden;
        if (typeof hidden != "boolean" || hidden === false) {
            $me.play();
        }
    }, this.conf.autoplayDur);
}, navItemHoverHandle: function (el) {
    var $modNav = $e("#" + this.conf.modNav), idx = $modNav.find("li").index(el);
    if (idx === this.curIndex) {
        return;
    }
    this.setCanPlay(true);
    this.play(idx);
}, bindEvent: function () {
    var $me = this, $modFocus = $e("#" + this.conf.modId), timer = null, mouseDelayTimer = null;
    if (!QZFL.lang.isString(this.conf.modId) || this.conf.modId.length == 0) {
        return;
    }
    var $modNav = $e("#" + this.conf.modNav);
    $modNav.delegate("li", "mouseover", function (evt) {
        clearTimeout(mouseDelayTimer);
        var el = this;
        mouseDelayTimer = setTimeout(function () {
            $me.navItemHoverHandle(el);
        }, $me.conf.delay);
    }, true);
    if (txv.common.useHtml5()) {
        $modNav.find("li").bind("touchEnd", function (evt) {
            $me.navItemHoverHandle(this);
        });
    }
    $e("#" + this.conf.modShowPicId).bind("webkitAnimationEnd", function () {
        QZFL.css.removeClassName(this.parentNode, $me.conf.activeClass);
    });
    $modFocus.onMouseEnter(function () {
        clearTimeout(timer);
        $me.stop();
    });
    $modFocus.onMouseLeave(function () {
        clearTimeout(timer);
        timer = setTimeout(function () {
            $me.starAutoPlay();
        }, $me.conf.autoplayDur);
    });
}, isNeedCover: function () {
    return!(QZFL.userAgent.chrome || QZFL.userAgent.safari);
}, setCanPlay: function (canplay) {
    this.canPlay = !!canplay;
}, play: function (idx) {
    if (this.conf.wheretoaddActive) {
        this.conf.wheretoaddActive.removeClass(this.conf.activeClass);
    }
    if (idx == undefined) {
        idx = this.curIndex + 1;
        if (idx >= $e("#" + this.conf.modNav).find("li").size()) {
            idx = 0;
        }
    }
    if (!this.canPlay || idx == this.curIndex) {
        return;
    }
    this.curIndex = idx;
    var $modNav = $j("#" + this.conf.modNav), img, $me = this, $navItems = $modNav.find("li"), $curItem = $navItems.eq(idx), $link = $curItem.find("a"), color = $link.attr("data-color") || "#000000";
    if (this.hadLoad[idx]) {
        $navItems.removeClass(this.conf.curClass);
        $curItem.addClass(this.conf.curClass);
        this.changeImg($link.attr("data-pic"), color);
    }
    else {
        img = $link.attr("data-pic");
        this.loadImg(img, function () {
            $navItems.removeClass($me.conf.curClass);
            $curItem.addClass($me.conf.curClass);
            $me.changeImg(img, color);
            $me.hadLoad[idx] = true;
        });
    }
    this.changeTitle($link.attr("href"), $link.attr("title"), idx);
    this.changeNavBgColor(color);
    if (QZFL.lang.isFunction(this.conf.onChange)) {
        this.conf.onChange(idx);
    }
    this.preLoadImg(idx);
}, changeImg: function (pic, color) {
    var $modPic = $e("#" + this.conf.modShowPicId), $modPrev = $e("#" + this.conf.modPrevShowPicId), $parent = $modPic.getParent(), fadeCover, isNeedCover = this.isNeedCover();
    if (isNeedCover) {
        fadeCover = getElementById(this.conf.fadeCoverId);
        this._opacity = 0.6;
        this.setopacity(fadeCover, this._opacity);
        QZFL.dom.setStyle(fadeCover, "display", "");
    }
    else {
        $parent.removeClass(this.conf.activeClass);
    }
    $modPrev.css("backgroundColor", $modPic.css("backgroundColor"));
    $modPrev.css("backgroundImage", $modPic.css("backgroundImage"));
    $modPic.css("backgroundColor", color);
    $modPic.css("backgroundImage", "url(" + pic + ")");
    if (isNeedCover) {
        this.fadeUp(fadeCover);
    }
    else {
        $parent.addClass(this.conf.activeClass);
    }
}, changeTitle: function (link, title) {
    if (!QZFL.lang.isString(link) || link.length == 0 || !QZFL.lang.isString(title)) {
        return;
    }
    var mod = getElementById(this.conf.modTitle);
    if (QZFL.lang.isElement(mod)) {
        mod.setAttribute("href", link);
        if ($e(mod).find("span").size() == 1) {
            $e(mod).find("span").text(title);
        }
        else {
            if (mod.innerText) {
                mod.innerText = title;
            }
            else {
                mod.textContent = title;
            }
        }
        title = QZFL.string.filterAngAndQt(title);
        mod.setAttribute("title", title);
    }
}, changeNavBgColor: function (color) {
    var $modNav = $j("#" + this.conf.modNav), bgimg = $modNav.css('backgroundImage') || "", colorCache = this.colorCache[color] || {}, modEl = $modNav.get(0);
    if ("filters"in modEl) {
        try {
            colorCache.startColorstr = colorCache.startColorstr || this.msColor(color, 0);
            colorCache.endColorstr = colorCache.endColorstr || this.msColor(color, 0.99);
            modEl.filters(0).startColorstr = colorCache.startColorstr;
            modEl.filters(0).endColorstr = colorCache.endColorstr;
        }
        catch (e) {
        }
    }
    else if (bgimg.indexOf('gradient') > 0) {
        colorCache.bgimg = colorCache.bgimg || this.colorRgb(color, 0.2).replace(/0.2\)/, '');
        bgimg = bgimg.replace(/rgba\(\d{1,3}\,\s*\d{1,3}\,\s*\d{1,3}\,/g, colorCache.bgimg);
        $modNav.css("backgroundImage", bgimg);
    }
    else {
        $j('.mod_focus_channel .focus_nav').css({'background-color': color})
    }
}, preLoadImg: function (curIndex) {
    if (isNaN(curIndex) || this.conf.preLoadImgNum == 0) {
        return;
    }
    var idx = curIndex + 1, targetIdx = curIndex + this.conf.preLoadImgNum, $me = this, $dataItem = $e("#" + this.conf.modNav).find("li a");
    for (; idx <= targetIdx; idx++) {
        if (!this.hadLoad[idx]) {
            this.loadImg($dataItem.attr("data-pic"), function () {
                $me.hadLoad[idx] = true;
            });
        }
    }
}, loadImg: function (src, cb) {
    if (!QZFL.lang.isString(src)) {
        return;
    }
    var img = document.createElement("img"), done = false;
    cb = QZFL.lang.isFunction(cb) ? cb : QZFL.emptyFn;
    function handle() {
        if (done) {
            return;
        }
        done = true;
        img.onerror = null;
        img.onload = null;
        delete img;
        img = null;
        cb();
    }

    img.onload = img.onerror = handle;
    img.onreadystatechange = function () {
        if (!this.readyState || this.readyState == "loaded" || this.readyState == "complete") {
            cb();
        }
    }
    img.src = src;
}, fadeUp: function (targetobject) {
    var self = this;
    if (this._opacity > 0) {
        clearTimeout(this.fadeUpTimer);
        this.setopacity(targetobject, this._opacity - 0.1);
        this.fadeUpTimer = setTimeout(function () {
            self.fadeUp(targetobject);
        }, this.conf.fadeUpInterval);
    }
    else {
        targetobject.style.display = "none";
    }
}, setopacity: function (targetobject, value) {
    if (typeof targetobject.style.opacity != "undefined") {
        targetobject.style.opacity = value;
    }
    else if (typeof targetobject.style.MozOpacity != "undefined") {
        targetobject.style.MozOpacity = value;
    }
    else if (!!Live.userAgent.ie) {
        targetobject.style.filter = "alpha(opacity=" + value * 100 + ")";
    }
    this._opacity = value;
}}
Live.txv.IndexFocus = function () {
    var config = {smallPicBlock: {showCnt: 8, items: $e("#mod_txv_focus_nav").find("li"), playRight: $e("#focus_smaillPic_next"), playLeft: $e("#focus_smaillPic_prev")}, focusPicBlock: {autoplayDur: 4000, onChange: function (idx) {
        smallPicObj.show(Math.floor(idx / smallPicObj.config.showCnt));
        if (QZFL.lang.isFunction($me.onChange)) {
            $me.onChange(idx);
        }
    }}}, focusPicObj = new txv.FocusSlider(), smallPicObj = new Live.SimpleImgShow(), $me = this;
    this.init = function (_conf) {
        _conf = _conf || {};
        QZFL.extend(config.smallPicBlock, _conf.smallPicBlock);
        QZFL.extend(config.focusPicBlock, _conf.focusPicBlock);
        smallPicObj.init(config.smallPicBlock);
        focusPicObj.init(config.focusPicBlock);
    }
    this.stop = function () {
        focusPicObj.stop();
    };
    this.play = function () {
        focusPicObj.starAutoPlay(focusPicObj.curIndex + 1);
    };
    this.onChange = QZFL.emptyFn;
    this.setCanPlay = function (canplay) {
        focusPicObj.setCanPlay(canplay);
    };
}
/*  |xGv00|562ccf59621b007be979a9baca5ba94c */